import os
import sys
import time
import asyncio  # ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö standard library

import discord
from discord.ext import commands  # ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö third-party libraries

from myserver import server_on  # ‚úÖ ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå

TOKEN = os.getenv("TOKEN")  # ‡πÉ‡∏™‡πà token ‡πÉ‡∏ô Environment
ANNOUNCE_CHANNEL_ID = 1350128705648984197
LOG_CHANNEL_ID = 1350380441504448512  # ID ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö logs

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

async def log_message(content):
    print(f"[LOG] {content}")  # ‚úÖ Debugging log
    asyncio.create_task(_send_log(content))  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ log ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö async

async def _send_log(content):
    try:
        log_channel = await bot.fetch_channel(LOG_CHANNEL_ID)
        await log_channel.send(content)
    except discord.errors.NotFound:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á logs ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LOG_CHANNEL_ID")
    except discord.errors.Forbidden:
        print("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á logs")

@bot.event
async def on_ready():
    if not getattr(bot, 'synced', False):
        await bot.tree.sync()
        bot.synced = True  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ Sync ‡∏ã‡πâ‡∏≥
        print(f'‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {bot.user}')
        await log_message("‚úÖ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

class SendMessageModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°")
        self.message_content = discord.ui.TextInput(label="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", style=discord.TextStyle.paragraph)
        self.add_item(self.message_content)
        self.mention_user = discord.ui.TextInput(label="Mention ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)", style=discord.TextStyle.short)
        self.add_item(self.mention_user)

    async def on_submit(self, interaction: discord.Interaction):
        # Process the message and mentions
        content = self.message_content.value
        mention_input = self.mention_user.value.split()
        mentions = []
        remaining_words = []

        for username in mention_input:
            member = discord.utils.get(interaction.guild.members, name=username) or discord.utils.get(interaction.guild.members, display_name=username)
            if member:
                mentions.append(member.mention)  # ‡πÉ‡∏ä‡πâ mention ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô message
            else:
                remaining_words.append(username)

        mention_text = " ".join(mentions)
        final_message = f"{mention_text}\n{content}" if mentions else content

        try:
            announce_channel = await bot.fetch_channel(ANNOUNCE_CHANNEL_ID)
            
            # Check if the message is new or sufficiently different from the last sent one
            current_time = time.time()
            if not getattr(bot, 'last_message_content', None) or (bot.last_message_content != final_message and current_time - getattr(bot, 'last_message_time', 0) > 2):
                bot.last_message_content = final_message
                bot.last_message_time = current_time
                await announce_channel.send(final_message, allowed_mentions=discord.AllowedMentions(users=True, roles=True, everyone=False))

            # Log message content and mentions
            log_entry = f"üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢ {interaction.user} ({interaction.user.id}) : {content}"
            if mentions:
                log_entry += f" | Mentions: {', '.join([m.display_name for m in mentions])}"
            await log_message(log_entry)

            await interaction.response.send_message("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

        except (discord.errors.NotFound, discord.errors.Forbidden) as e:
            error_msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {str(e)}"
            print(error_msg)
            await log_message(error_msg)

class ConfirmButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)

    @discord.ui.button(label="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", style=discord.ButtonStyle.green)
    async def send_message(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(SendMessageModal())

@bot.command()
async def ping(ctx):
    await ctx.send('üèì Pong! ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà!')
    await log_message(f"üèì Pong! ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping ‡πÇ‡∏î‡∏¢ {ctx.author} ({ctx.author.id})")

@bot.command()
async def update(ctx):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
        return
    
    await ctx.send("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≠‡∏ó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
    await log_message("üîÑ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
    try:
        os._exit(0)  # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó ‡πÉ‡∏´‡πâ‡πÇ‡∏Æ‡∏™‡∏ï‡πå‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏≠‡∏á
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: {e}")
        await log_message(f"‚ùå ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

@bot.command()
async def setup(ctx):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
        await log_message(f"‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {ctx.author} ({ctx.author.id}) ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á setup ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
        return

    embed = discord.Embed(
        title="üì© ‡πÉ‡∏´‡πâ‡∏û‡∏£‡∏µ‡πà‡πÇ‡∏ï‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏∏‡∏ì",
        description="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ @mention ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢",
        color=discord.Color.blue()
    )
    view = ConfirmButton()
    await ctx.send(embed=embed, view=view)
    await log_message(f"‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö setup ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á: {ctx.channel.name}")

server_on()  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå HTTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render
bot.run(TOKEN)
